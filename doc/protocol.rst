

================================
The Music Player Daemon protocol
================================

General protocol syntax
#######################

Protocol overview
=================

The ``MPD`` command protocol exchanges
line-based text records between client and server over TCP.
Once the client is connected to the server, they conduct a
conversation until the client closes the connection. The
conversation flow is always initiated by the client.

The client transmits a command sequence, terminated by the
newline character ``\n``.  The server will
respond with one or more lines, the last of which will be a
completion code.

When the client connects to the server, the server will answer
with the following line:

CMDSYN:  OK MPD version

where ``version`` is a version identifier such as
0.12.2.  This version identifier is the version of the protocol
spoken, not the real version of the daemon.  (There is no way to
retrieve this real version identifier from the connection.)

Requests
========

``COMMAND [ARG...]``

If arguments contain spaces, they should be surrounded by double
quotation marks.

Argument strings are separated from the command and any other
arguments by linear white-space (' ' or '\\t').

All data between the client and the server is encoded in
UTF-8.

Responses
=========

A command returns ``OK`` on completion or
``ACK some error`` on failure.  These
denote the end of command execution.

Failure responses
-----------------

The nature of the error can be gleaned from the information
that follows the ``ACK``.
``ACK`` lines are of the form:

CMDSYN:  ACK [error@command_listNum] {current_command} message_text\n

These responses are generated by a call to
``commandError``. They contain four separate
terms. Let's look at each of them:

- ``error``: numeric value of one
  of the ``ACK_ERROR`` constants defined
  in `src/protocol/Ack.hxx`.

- ``command_listNum``:
  offset of the command that caused the error in a `Command List <command_lists>`.
  An error will always cause a command list to terminate
  at the command that causes the error.

- ``current_command``:
  name of the command, in a `Command List <command_lists>`,
  that was executing when the error occurred.

- ``message_text``:
  some (hopefully) informative text that describes the
  nature of the error.

foo
~~~

An example might help. Consider the following sequence
sent from the client to the server.

CMDSYN:  command_list_begin volume 86 play 10240 status command_list_end

The server responds with:

``ACK \[50@1] {play} song doesn't exist: "10240"``

This tells us that the play command, which was the
second in the list (the first or only command is
numbered 0), failed with error 50.  The number 50
translates to ``ACK_ERROR_NO_EXIST``--the
song doesn't exist.  This is reiterated by the message text
which also tells us which song doesn't exist.

.. _command_lists:

Command lists
=============

To facilitate faster adding of files etc. you can pass a list
of commands all at once using a command list.  The command
list begins with `command_list_begin` or
`command_list_ok_begin` and ends with
`command_list_end`.

It does not execute any commands until the list has ended.
The return value is whatever the return for a list of commands
is.  On success for all commands,
``OK`` is returned.  If a command
fails, no more commands are executed and the appropriate
``ACK`` error is returned. If
`command_list_ok_begin` is used,
``list_OK`` is returned for each
successful command executed in the command list.

Ranges
======

Some commands (e.g. `delete` <command_delete>`)
allow specifying a range in the form
*START:END* (the ``END``
item is not included in the range, similar to ranges in the
Python programming language).  If ``END`` is
omitted, then the maximum possible value is assumed.

.. _filter_syntax:

Filters
=======

All commands which search for songs (e.g. `find` <command_find>` and
`searchadd` <command_searchadd>`)
share a common filter syntax:

CMDSYN:  find EXPRESSION

``EXPRESSION`` is a string enclosed in
parantheses which can be one of:

- ``(TAG == 'VALUE')``: match a tag value.
  ``(TAG != 'VALUE')``: mismatch a tag value.
  The special tag "*any*" checks all
  tag values.
  *albumartist* looks for
  ``VALUE`` in ``AlbumArtist``
  and falls back to ``Artist`` tags if
  ``AlbumArtist`` does not exist.
  ``VALUE`` is what to find.  The
  `find` commands specify an exact value
  and are case-sensitive; the `search`
  commands specify a sub string and ignore case.

- ``(file == 'VALUE')``: match the full song URI
  (relative to the music directory).

- ``(base 'VALUE')``: restrict the search to
  songs in the given directory (relative to the music
  directory).

- ``(modified-since 'VALUE')``: compares the
  file's time stamp with the given value (ISO 8601 or UNIX
  time stamp).

- ``(AudioFormat == 'SAMPLERATE:BITS:CHANNELS')``:
  compares the audio format with the given value.

- ``(AudioFormat =~ 'SAMPLERATE:BITS:CHANNELS')``:
  matches the audio format with the given mask (i.e. one
  or more attributes may be "*").

- ``(!EXPRESSION)``: negate an expression.

- ``(EXPRESSION1 AND EXPRESSION2 ...)``: combine two or
  more expressions with logical "and".

Prior to MPD 0.21, the syntax looked like this:

CMDSYN:  find TYPE VALUE

.. _tags:

Tags
====

The following tags are supported by
``MPD``:

There can be multiple values for some of these tags.  For
example, ``MPD`` may return multiple
lines with a ``performer`` tag.  A tag value is
a UTF-8 string.

.. _other_metadata:

Other Metadata
==============

The response to `lsinfo` <command_lsinfo>` and
similar commands may contain `song
tags <tags>` and other metadata, specifically:

- ``duration``: the duration of the song in
  seconds; may contain a fractional part.

- ``time``: like ``duration``,
  but as integer value.  This is deprecated and is only here
  for compatibility with older clients.  Do not use.

- ``Range``: if this is a queue item
  referring only to a portion of the song file, then this
  attribute contains the time range in the form
  *START-END* or
  *START-* (open ended); both
  *START* and
  *END* are time stamps within the song
  in seconds (may contain a fractional part).  Example:
  "*60-120*" plays only the second
  minute; "*180*" skips the first three
  minutes.

- ``Format``: the audio format of the song
  (or an approximation to a format supported by MPD and the
  decoder plugin being used).  When playing this file, the
  ``audio`` value in the `status` <command_status>`
  response should be the same.

- ``Last-Modified``: the time stamp of the
  last modification of the underlying file in ISO 8601
  format.  Example:
  "*2008-09-28T20:04:57Z*"

Recipes
#######

Queuing
=======

Often, users run ``MPD`` with ``random`` enabled, but want to
be able to insert songs "before" the rest of the playlist.
That is commonly called "queuing".

``MPD`` implements this by allowing the client to specify a
"priority" for each song in the playlist (commands ``priod`` <command_prio>` and
``priodid`` <command_prioid>`).  A
higher priority means that the song is going to be played
before the other songs.

In "random" mode, ``MPD`` maintains an
internal randomized sequence of songs.  In this sequence,
songs with a higher priority come first, and all songs with
the same priority are shuffled (by default, all songs are
shuffled, because all have the same priority "0").  When you
increase the priority of a song, it is moved to the front of
the sequence according to its new priority, but always after
the current one.  A song that has been played already (it's
"before" the current song in that sequence) will only be
scheduled for repeated playback if its priority has become
bigger than the priority of the current song.  Decreasing the
priority of a song will move it farther to the end of the
sequence.  Changing the priority of the current song has no
effect on the sequence.  During playback, a song's priority is
reset to zero.

Command reference
#################

.. note:: For manipulating playlists and playing, there are two sets of
   commands.  One set uses the song id of a song in the playlist,
   while another set uses the playlist position of the song. The
   commands using song ids should be used instead of the commands
   that manipulate and control playback based on playlist
   position. Using song ids is a safer method when multiple
   clients are interacting with ``MPD``.

Querying ``MPD``'s status
================================

CMDSYN:  clearerror
    Clears the current error message in status (this is also
    accomplished by any command that starts playback).

CMDSYN:  currentsong
    Displays the song info of the current song (same song that
    is identified in status).

CMDSYN:  idle SUBSYSTEMS
    Introduced with
    ``MPD`` 0.14
    Waits until there is a noteworthy change in one or more
    of ``MPD``'s subsystems.  As soon
    as there is one, it lists all changed systems in a line
    in the format ``changed:
    SUBSYSTEM``, where SUBSYSTEM is one of the
    following:
    - ``database``: the song database has been modified after `update` <command_update>`.
    - ``update``: a database update has started or finished.  If the database was modified during the update, the ``database`` event is also emitted.
    - ``stored_playlist``: a stored playlist has been modified, renamed, created or deleted
    - ``playlist``: the current playlist has been modified
    - ``player``: the player has been started, stopped or seeked
    - ``mixer``: the volume has been changed
    - ``output``: an audio output has been added, removed or modified (e.g. renamed, enabled or disabled)
    - ``options``: options like repeat, random, crossfade, replay gain
    - ``partition``: a partition was added, removed or changed
    - ``sticker``: the sticker database has been modified.
    - ``subscription``: a client has subscribed or unsubscribed to a channel
    - ``message``: a message was received on a channel this client is subscribed to; this event is only emitted when the queue is empty
    Change events accumulate, even while the connection is
    not in "idle" mode; no events gets lost while the client
    is doing something else with the connection.  If an
    event had already occurred since the last call, the new
    `idle` <command_idle>`
    command will return immediately.
    While a client is waiting for `idle`
    results, the server disables timeouts, allowing a client
    to wait for events as long as mpd runs.  The
    `idle` command can be canceled by
    sending the command `noidle` (no other
    commands are allowed). ``MPD``
    will then leave `idle` mode and print
    results immediately; might be empty at this time.
    If the optional ``SUBSYSTEMS`` argument
    is used, ``MPD`` will only send
    notifications when something changed in one of the
    specified subsytems.

CMDSYN:  status
    Reports the current status of the player and the volume
    level.
    - ``volume``: ``0-100`` or ``-1`` if the volume cannot be determined
    - ``repeat``: ``0`` or ``1``
    - ``random``: ``0`` or ``1``
    - ``single``: Introduced with ``MPD`` 0.15 (oneshot introduced with 0.20). ``0``, ``1``, or ``oneshot``
    - ``consume``: ``0`` or ``1``
    - ``playlist``: 31-bit unsigned integer, the playlist version number
    - ``playlistlength``: integer, the length of the playlist
    - ``state``: ``play``, ``stop, or ``pause``
    - ``song``: playlist song number of the current song stopped on or playing
    - ``songid``: playlist songid of the current song stopped on or playing
    - ``nextsong``: playlist song number of the next song to be played
    - ``nextsongid``: playlist songid of the next song to be played
    - ``time``: total time elapsed (of current playing/paused song)
    - ``elapsed``: Introduced with ``MPD`` 0.16. Total time elapsed within the current song, but with higher resolution.
    - ``duration``: Introduced with ``MPD`` 0.20. Duration of the current song in seconds.
    - ``bitrate``: instantaneous bitrate in kbps
    - ``xfade``: ``crossfade`` in seconds
    - ``mixrampdb``: ``mixramp`` threshold in dB
    - ``mixrampdelay``: ``mixrampdelay`` in seconds
    - ``audio``: The format emitted by the decoder plugin during playback, format: ``*samplerate:bits:channels*``. Check the user manual for a detailed explanation.
    - ``updating_db``: ``job id``
    - ``error``: if there is an error, returns message here

CMDSYN:  stats
    Displays statistics.
    - ``artists``: number of artists
    - ``albums``: number of albums
    - ``songs``: number of songs
    - ``uptime``: daemon uptime in seconds
    - ``db_playtime``: sum of all song times in the db
    - ``db_update``: last db update in UNIX time
    - ``playtime``: time length of music played

Playback options
================

CMDSYN:  consume STATE
    Sets consume state to ``STATE``,
    ``STATE`` should be 0 or 1.
    When consume is activated, each song played is removed from playlist.

CMDSYN:  crossfade SECONDS
    Sets crossfading between songs.

CMDSYN:  mixrampdb deciBels
    Sets the threshold at which songs will be overlapped. Like crossfading but doesn't fade the track volume, just overlaps. The songs need to have MixRamp tags added by an external tool. 0dB is the normalized maximum volume so use negative values, I prefer -17dB. In the absence of mixramp tags crossfading will be used. See http://sourceforge.net/projects/mixramp

CMDSYN:  mixrampdelay SECONDS
    Additional time subtracted from the overlap calculated by mixrampdb. A value of "nan" disables MixRamp overlapping and falls back to crossfading.

CMDSYN:  random STATE
    Sets random state to ``STATE``,
    ``STATE`` should be 0 or 1.

CMDSYN:  repeat STATE
    Sets repeat state to ``STATE``,
    ``STATE`` should be 0 or 1.

CMDSYN:  setvol VOL
    Sets volume to ``VOL``, the range of
    volume is 0-100.

CMDSYN:  single STATE
    Sets single state to ``STATE``,
    ``STATE`` should be 0 or 1.
    When single is activated, playback is stopped after current song, or
    song is repeated if the 'repeat' mode is enabled.

CMDSYN:  replay_gain_mode MODE
    Sets the replay gain mode.  One of
    *off*,
    *track*,
    *album*,
    *auto*
    added in ``MPD`` 0.16
    .
    Changing the mode during playback may take several
    seconds, because the new settings does not affect the
    buffered data.
    This command triggers the
    ``options`` idle event.

CMDSYN:  replay_gain_status
    Prints replay gain options.  Currently, only the
    variable ``replay_gain_mode`` is
    returned.

CMDSYN:  volume CHANGE
    Changes volume by amount ``CHANGE``.
    .. note:: ``volume`` is deprecated, use ``setvol`` instead.

Controlling playback
====================

CMDSYN:  next
    Plays next song in the playlist.

CMDSYN:  pause PAUSE
    Toggles pause/resumes playing, ``PAUSE`` is 0 or 1.
    .. note:: The use of pause command w/o the PAUSE argument is deprecated.

CMDSYN:  play SONGPOS
    Begins playing the playlist at song number
    ``SONGPOS``.

CMDSYN:  playid SONGID
    Begins playing the playlist at song
    ``SONGID``.

CMDSYN:  previous
    Plays previous song in the playlist.

CMDSYN:  seek SONGPOS TIME
    Seeks to the position ``TIME`` (in
    seconds; fractions allowed) of entry
    ``SONGPOS`` in the playlist.

CMDSYN:  seekid SONGID TIME
    Seeks to the position ``TIME`` (in
    seconds; fractions allowed) of song
    ``SONGID``.

CMDSYN:  seekcur TIME
    Seeks to the position ``TIME`` (in
    seconds; fractions allowed) within the current song.  If
    prefixed by '+' or '-', then the time is relative to the
    current playing position.

CMDSYN:  stop
    Stops playing.

The current playlist
====================

CMDSYN:  add URI
    Adds the file ``URI`` to the playlist
    (directories add recursively). ``URI``
    can also be a single file.

CMDSYN:  addid URI POSITION
    Adds a song to the playlist (non-recursive) and returns the song id. ``URI`` is always a single file or  URL. For example:

    ::
        addid "foo.mp3"
        Id: 999
        OK

CMDSYN:  clear
    Clears the current playlist.

CMDSYN:  delete POS START:END
    Deletes a song from the playlist.

CMDSYN:  deleteid SONGID
    Deletes the song ``SONGID`` from the
    playlist

CMDSYN:  move FROM START:END TO
    Moves the song at ``FROM`` or range of songs
    at ``START:END`` to ``TO``
    in the playlist.
    Ranges are supported since ``MPD`` 0.15

CMDSYN:  moveid FROM TO
    Moves the song with ``FROM`` (songid) to
    ``TO`` (playlist index) in the
    playlist.  If ``TO`` is negative, it
    is relative to the current song in the playlist (if
    there is one).

CMDSYN:  playlist
    Displays the current playlist.
    .. note:: Do not use this, instead use `playlistinfo` <command_playlistinfo>`.

CMDSYN:  playlistfind TAG NEEDLE
    Finds songs in the current playlist with strict
    matching.

CMDSYN:  playlistid SONGID
    Displays a list of songs in the playlist.
    ``SONGID`` is optional and specifies a
    single song to display info for.

CMDSYN:  playlistinfo SONGPOS START:END
    Displays a list of all songs in the playlist, or if the optional
    argument is given, displays information only for the song
    ``SONGPOS`` or the range of songs
    ``START:END``

CMDSYN:  playlistsearch TAG NEEDLE
    Searches case-insensitively for partial matches in the
    current playlist.

CMDSYN:  plchanges VERSION START:END
    Displays changed songs currently in the playlist since
    ``VERSION``.  Start and end positions may
    be given to limit the output to changes in the given
    range.
    To detect songs that were deleted at the end of the
    playlist, use playlistlength returned by status command.

CMDSYN:  plchangesposid VERSION START:END
    Displays changed songs currently in the playlist since
    ``VERSION``.  This function only
    returns the position and the id of the changed song, not
    the complete metadata. This is more bandwidth efficient.
    To detect songs that were deleted at the end of the
    playlist, use playlistlength returned by status command.

CMDSYN:  prio PRIORITY START:END
    Set the priority of the specified songs.  A higher
    priority means that it will be played first when
    "random" mode is enabled.
    A priority is an integer between 0 and 255.  The default
    priority of new songs is 0.

CMDSYN:  prioid PRIORITY ID
    Same as ``priod`` <command_prio>`,
    but address the songs with their id.

CMDSYN:  rangeid ID START:END
    Since ``MPD``
    0.19 Specifies the portion of the
    song that shall be played.  ``START`` and
    ``END`` are offsets in seconds
    (fractional seconds allowed); both are optional.
    Omitting both (i.e. sending just ":") means "remove the
    range, play everything".  A song that is currently
    playing cannot be manipulated this way.

CMDSYN:  shuffle START:END
    Shuffles the current playlist.
    ``START:END`` is optional and specifies
    a range of songs.

CMDSYN:  swap SONG1 SONG2
    Swaps the positions of ``SONG1`` and
    ``SONG2``.

CMDSYN:  swapid SONG1 SONG2
    Swaps the positions of ``SONG1`` and
    ``SONG2`` (both song ids).

CMDSYN:  addtagid SONGID TAG VALUE
    Adds a tag to the specified song.  Editing song tags is
    only possible for remote songs.  This change is
    volatile: it may be overwritten by tags received from
    the server, and the data is gone when the song gets
    removed from the queue.

CMDSYN:  cleartagid SONGID TAG
    Removes tags from the specified song.  If
    ``TAG`` is not specified, then all tag
    values will be removed.  Editing song tags is only
    possible for remote songs.

Stored playlists
================

Playlists are stored inside the configured playlist directory.
They are addressed with their file name (without the directory
and without the `.m3u` suffix).

Some of the commands described in this section can be used to
run playlist plugins instead of the hard-coded simple
`m3u` parser.  They can access playlists in
the music directory (relative path including the suffix) or
remote playlists (absolute URI with a supported scheme).

CMDSYN:  listplaylist NAME
    Lists the songs in the playlist.  Playlist plugins are
    supported.

CMDSYN:  listplaylistinfo NAME
    Lists the songs with metadata in the playlist.  Playlist
    plugins are supported.

CMDSYN:  listplaylists
    Prints a list of the playlist directory.
    After each playlist name the server sends its last
    modification time as attribute "Last-Modified" in ISO
    8601 format.  To avoid problems due to clock differences
    between clients and the server, clients should not
    compare this value with their local clock.

CMDSYN:  load NAME START:END
    Loads the playlist into the current queue.  Playlist
    plugins are supported.  A range may be specified to load
    only a part of the playlist.

CMDSYN:  playlistadd NAME URI
    Adds ``URI`` to the playlist
    `NAME.m3u`.
    `NAME.m3u` will be created if it does
    not exist.

CMDSYN:  playlistclear NAME
    Clears the playlist `NAME.m3u`.

CMDSYN:  playlistdelete NAME SONGPOS
    Deletes ``SONGPOS`` from the
    playlist `NAME.m3u`.

CMDSYN:  playlistmove NAME FROM TO
    Moves the song at position ``FROM`` in
    the playlist `NAME.m3u` to the
    position ``TO``.

CMDSYN:  rename NAME NEW_NAME
    Renames the playlist `NAME.m3u` to `NEW_NAME.m3u`.

CMDSYN:  rm NAME
    Removes the playlist `NAME.m3u` from
    the playlist directory.

CMDSYN:  save NAME
    Saves the current playlist to
    `NAME.m3u` in the playlist directory.

The music database
==================

CMDSYN:  albumart URI OFFSET
    Searches the directory the file ``URI``
    resides in and attempts to return a chunk of an album
    art image file at offset ``OFFSET``.
    Uses the filename "cover" with any of ".png, .jpg,
    .tiff, .bmp".
    Returns the file size and actual number
    of bytes read at the requested offset, followed
    by the chunk requested as raw bytes, then a
    newline and the completion code.
    Example:
    albumart
    size: 1024768
    binary: 8192
    <8192 bytes>
    OK

CMDSYN:  count FILTER group GROUPTYPE
    Count the number of songs and their total playtime in
    the database matching ``FILTER`` (see
    `Filters <filter_syntax>`).  The
    following prints the number of songs whose title matches
    "Echoes":
    count title Echoes
    The *group* keyword may be used to
    group the results by a tag.  The first following example
    prints per-artist counts while the next prints the
    number of songs whose title matches "Echoes" grouped by
    artist:
    count group artist
    count title Echoes group artist

CMDSYN:  find FILTER sort TYPE window START : END
    Search the database for songs matching
    ``FILTER`` (see `Filters <filter_syntax>`).
    ``sort`` sorts the result by the
    specified tag.  The sort is descending if the tag is
    prefixed with a minus ('-').
    Without ``sort``, the
    order is undefined.  Only the first tag value will be
    used, if multiple of the same type exist.  To sort by
    "Artist", "Album" or "AlbumArtist", you should specify
    "ArtistSort", "AlbumSort" or "AlbumArtistSort" instead.
    These will automatically fall back to the former if
    "\*Sort" doesn't exist.  "AlbumArtist" falls back to just
    "Artist".  The type "Last-Modified" can sort by file
    modification time.
    ``window`` can be used to query only a
    portion of the real response.  The parameter is two
    zero-based record numbers; a start number and an end
    number.

CMDSYN:  findadd FILTER
    Search the database for songs matching
    ``FILTER`` (see `Filters <filter_syntax>`) and add them to
    the queue.  Parameters have the same meaning as for
    `find` <command_find>`.

CMDSYN:  list TYPE FILTER group GROUPTYPE
    Lists unique tags values of the specified type.
    ``TYPE`` can be any tag supported by
    ``MPD`` or
    *file*.
    Additional arguments may specify a `filter <filter_syntax>`.
    The *group* keyword may be used
    (repeatedly) to group the results by one or more tags.
    The following example lists all album names,
    grouped by their respective (album) artist:
    list album group albumartist

CMDSYN:  listall URI
    Lists all songs and directories in
    ``URI``.
    Do not use this command.  Do not manage a client-side
    copy of ``MPD``'s database.  That
    is fragile and adds huge overhead.  It will break with
    large databases.  Instead, query
    ``MPD`` whenever you need
    something.

CMDSYN:  listallinfo URI
    Same as `listall` <command_listall>`,
    except it also returns metadata info in the same format
    as `lsinfo` <command_lsinfo>`
    Do not use this command.  Do not manage a client-side
    copy of ``MPD``'s database.  That
    is fragile and adds huge overhead.  It will break with
    large databases.  Instead, query
    ``MPD`` whenever you need
    something.

CMDSYN:  listfiles URI
    Lists the contents of the directory
    ``URI``, including files are not
    recognized by ``MPD``.
    ``URI`` can be a path relative to the
    music directory or an URI understood by one of the
    storage plugins.  The response contains at least one
    line for each directory entry with the prefix "file: "
    or "directory: ", and may be followed by file attributes
    such as "Last-Modified" and "size".
    For example, "smb://SERVER" returns a list of all shares
    on the given SMB/CIFS server; "nfs://servername/path"
    obtains a directory listing from the NFS server.

CMDSYN:  lsinfo URI
    Lists the contents of the directory
    ``URI``.  The response contains records
    starting with ``file``,
    ``directory`` or
    ``playlist``, each followed by metadata
    (`tags <tags>` or `other metadata <other_metadata>`).
    When listing the root directory, this currently returns
    the list of stored playlists.  This behavior is
    deprecated; use "listplaylists" instead.
    This command may be used to list metadata of remote
    files (e.g. URI beginning with "http://" or "smb://").
    Clients that are connected via UNIX domain socket may
    use this command to read the tags of an arbitrary local
    file (URI is an absolute path).

CMDSYN:  readcomments URI
    Read "comments" (i.e. key-value pairs) from the file
    specified by "URI".  This "URI" can be a path relative
    to the music directory or an absolute path.
    This command may be used to list metadata of remote
    files (e.g. URI beginning with "http://" or "smb://").
    The response consists of lines in the form "KEY: VALUE".
    Comments with suspicious characters (e.g. newlines) are
    ignored silently.
    The meaning of these depends on the codec, and not all
    decoder plugins support it.  For example, on Ogg files,
    this lists the Vorbis comments.

CMDSYN:  search FILTER sort TYPE window START : END
    Search the database for songs matching
    ``FILTER`` (see `Filters <filter_syntax>`).  Parameters
    have the same meaning as for `find` <command_find>`,
    except that search is not case sensitive.

CMDSYN:  searchadd FILTER
    Search the database for songs matching
    ``FILTER`` (see `Filters <filter_syntax>`) and add them to
    the queue.
    Parameters have the same meaning as for `search` <command_search>`.

CMDSYN:  searchaddpl NAME FILTER
    Search the database for songs matching
    ``FILTER`` (see `Filters <filter_syntax>`) and add them to
    the playlist named ``NAME``.
    If a playlist by that name doesn't exist it is created.
    Parameters have the same meaning as for `search` <command_search>`.

CMDSYN:  update URI
    Updates the music database: find new files, remove
    deleted files, update modified files.
    ``URI`` is a particular directory or
    song/file to update.  If you do not specify it,
    everything is updated.
    Prints "updating_db: JOBID" where
    ``JOBID`` is a positive number
    identifying the update job.  You can read the current
    job id in the `status` <command_status>`
    response.

CMDSYN:  rescan URI
    Same as `update` <command_update>`,
    but also rescans unmodified files.

Mounts and neighbors
====================

A "storage" provides access to files in a directory tree.  The
most basic storage plugin is the "local" storage plugin which
accesses the local file system, and there are plugins to
access NFS and SMB servers.

Multiple storages can be "mounted" together, similar to the
`mount` command on many operating
systems, but without cooperation from the kernel.  No
superuser privileges are necessary, beause this mapping exists
only inside the ``MPD`` process

CMDSYN:  mount PATH URI
    Mount the specified remote storage URI at the given
    path.  Example:
    mount foo nfs://192.168.1.4/export/mp3

CMDSYN:  unmount PATH
    Unmounts the specified path.  Example:
    unmount foo

CMDSYN:  listmounts
    Queries a list of all mounts.  By default, this contains
    just the configured ``music_directory``.
    Example:
    listmounts
    mount:
    storage: /home/foo/music
    mount: foo
    storage: nfs://192.168.1.4/export/mp3
    OK

CMDSYN:  listneighbors
    Queries a list of "neighbors" (e.g. accessible file
    servers on the local net).  Items on that list may be
    used with the `mount` <command_mount>`
    command.  Example:
    listneighbors
    neighbor: smb://FOO
    name: FOO (Samba 4.1.11-Debian)
    OK

Stickers
========

"Stickers" are pieces of
information attached to existing
``MPD`` objects (e.g. song files,
directories, albums).  Clients can create arbitrary name/value
pairs.  ``MPD`` itself does not assume
any special meaning in them.

The goal is to allow clients to share additional (possibly
dynamic) information about songs, which is neither stored on
the client (not available to other clients), nor stored in the
song files (``MPD`` has no write
access).

Client developers should create a standard for common sticker
names, to ensure interoperability.

Objects which may have stickers are addressed by their object
type ("song" for song objects) and their URI (the path within
the database for songs).

CMDSYN:  sticker get TYPE URI NAME
    Reads a sticker value for the specified object.

CMDSYN:  sticker set TYPE URI NAME VALUE
    Adds a sticker value to the specified object.  If a
    sticker item with that name already exists, it is
    replaced.

CMDSYN:  sticker delete TYPE URI NAME
    Deletes a sticker value from the specified object.  If
    you do not specify a sticker name, all sticker values
    are deleted.

CMDSYN:  sticker list TYPE URI
    Lists the stickers for the specified object.

CMDSYN:  sticker find TYPE URI NAME
    Searches the sticker database for stickers with the
    specified name, below the specified directory (URI).
    For each matching song, it prints the URI and that one
    sticker's value.

CMDSYN:  sticker find TYPE URI NAME = VALUE
    Searches for stickers with the given value.
    Other supported operators are:
    "``<``", "``>``"

Connection settings
===================

CMDSYN:  close
    Closes the connection to ``MPD``.
    ``MPD`` will try to send the
    remaining output buffer before it actually closes the
    connection, but that cannot be guaranteed.  This command
    will not generate a response.

CMDSYN:  kill
    Kills ``MPD``.

CMDSYN:  password PASSWORD
    This is used for authentication with the server.
    ``PASSWORD`` is simply the plaintext
    password.

CMDSYN:  ping
    Does nothing but return "OK".

CMDSYN:  tagtypes
    Shows a list of available tag types.  It is an
    intersection of the ``metadata_to_use``
    setting and this client's tag mask.
    About the tag mask: each client can decide to disable
    any number of tag types, which will be omitted from
    responses to this client.  That is a good idea, because
    it makes responses smaller.  The following
    ``tagtypes`` sub commands configure this
    list.

CMDSYN:  tagtypes disable NAME
    Remove one or more tags from the list of tag types the
    client is interested in.  These will be omitted from
    responses to this client.

CMDSYN:  tagtypes enable NAME
    Re-enable one or more tags from the list of tag types
    for this client.  These will no longer be hidden from
    responses to this client.

CMDSYN:  tagtypes clear
    Clear the list of tag types this client is interested
    in.  This means that ``MPD`` will
    not send any tags to this client.

CMDSYN:  tagtypes all
    Announce that this client is interested in all tag
    types.  This is the default setting for new clients.

Partition commands
==================

These commands allow a client to inspect and manage
"partitions".  A partition is one frontend of a multi-player
MPD process: it has separate queue, player and outputs.  A
client is assigned to one partition at a time.

CMDSYN:  partition NAME
    Switch the client to a different partition.

CMDSYN:  listpartitions
    Print a list of partitions.  Each partition starts with
    a ``partition`` keyword and the
    partition's name, followed by information about the
    partition.

CMDSYN:  newpartition NAME
    Create a new partition.

Audio output devices
====================

CMDSYN:  disableoutput ID
    Turns an output off.

CMDSYN:  enableoutput ID
    Turns an output on.

CMDSYN:  toggleoutput ID
    Turns an output on or off, depending on the current
    state.

CMDSYN:  outputs
    Shows information about all outputs.
    
    ::

        outputid: 0
        outputname: My ALSA Device
        plugin: alsa
        outputenabled: 0
        attribute: dop=0
        OK

    Return information:
    - ``outputid``: ID of the output. May change between executions
    - ``outputname``: Name of the output. It can be any.
    - ``outputenabled``: Status of the output. 0 if disabled, 1 if enabled.

CMDSYN:  outputset ID NAME VALUE
    Set a runtime attribute.  These are specific to the
    output plugin, and supported values are usually printed
    in the `outputs` <command_outputs>`
    response.

Reflection
==========

CMDSYN:  config
    Dumps configuration values that may be interesting for
    the client.  This command is only permitted to "local"
    clients (connected via UNIX domain socket).
    The following response attributes are available:
    Name
    Description
    ``music_directory``
    The absolute path of the music directory.

CMDSYN:  commands
    Shows which commands the current user has access to.

CMDSYN:  notcommands
    Shows which commands the current user does not have
    access to.

CMDSYN:  urlhandlers
    Gets a list of available URL handlers.

CMDSYN:  decoders
    Print a list of decoder plugins, followed by their
    supported suffixes and MIME types.  Example response:
    plugin: mad
    suffix: mp3
    suffix: mp2
    mime_type: audio/mpeg
    plugin: mpcdec
    suffix: mpc

Client to client
================

Clients can communicate with each others over "channels".  A
channel is created by a client subscribing to it.  More than
one client can be subscribed to a channel at a time; all of
them will receive the messages which get sent to it.

Each time a client subscribes or unsubscribes, the global idle
event ``subscription`` is generated.  In
conjunction with the `channels` <command_channels>`
command, this may be used to auto-detect clients providing
additional services.

New messages are indicated by the ``message``
idle event.

CMDSYN:  subscribe NAME
    Subscribe to a channel.  The channel is created if it
    does not exist already.  The name may consist of
    alphanumeric ASCII characters plus underscore, dash, dot
    and colon.

CMDSYN:  unsubscribe NAME
    Unsubscribe from a channel.

CMDSYN:  channels
    Obtain a list of all channels.  The response is a list
    of "channel:" lines.

CMDSYN:  readmessages
    Reads messages for this client.  The response is a list
    of "channel:" and "message:" lines.

CMDSYN:  sendmessage CHANNEL TEXT
    Send a message to the specified channel.


